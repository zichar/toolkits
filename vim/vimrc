" This line should not be removed as it ensures that various options are
" properly set to work with the Vim-related packages availablein Debian.  " debian.vim

" Uncomment the next line to make Vim more Vi-compatible
" NOTE: debian.vim sets'nocompatible'. Setting'compatible' changes numerous
" options, so any other options should be set AFTER setting 'compatible'.
set nocompatible

" Vim5 and later versions support syntax highlighting. Uncommenting the
" following enables syntax highlighting by default.
if has("syntax")
	syntax on            " 语法高亮
endif
"syntax enable
colorscheme ron        " elflord ron peachpuff default 设置配色方案，vim自带的配色方案保存在/usr/share/vim/vim72/colors目录下
"colorscheme solarized

" detect file type
filetype on
filetype plugin on

" If using a dark background within the editing area and syntax highlighting
" turn on this option as well
set background=dark
"set background=light

" Uncomment the following to have Vim jump to the last position when
" reopening a file
if has("autocmd")
	au BufReadPost * if line("'\"") > 1 && line("'\"")<= line("$")| exe "normal! g'\"" | endif
	"have Vim load indentation rules and plugins accordingto the detected filetype
	filetype plugin indent on
endif

" The following are commented out as they cause vim to behave a lot
" differently from regular Vi. They are highly recommended though.

set ignorecase        " 搜索模式里忽略大小写
set smartcase        " 如果搜索模式包含大写字符，不使用 'ignorecase' 选项。只有在输入搜索模式并且打开 'ignorecase' 选项时才会使用。
set autowrite        " 自动把内容写回文件: 如果文件被修改过，在每个 :next、:rewind、:last、:first、:previous、:stop、:suspend、:tag、:!、:make、CTRL-] 和 CTRL-^命令时进行；用 :buffer、CTRL-O、CTRL-I、'{A-Z0-9} 或 `{A-Z0-9} 命令转到别的文件时亦然。
set autoindent        " 设置自动对齐(缩进)：即每行的缩进值与上一行相等；使用 noautoindent 取消设置
set smartindent        " 智能对齐方式
set tabstop=4        " 设置制表符(tab键)的宽度
set softtabstop=4     " 设置软制表符的宽度    
set shiftwidth=4    " (自动) 缩进使用的4个空格
set cindent            " 使用 C/C++ 语言的自动缩进方式
set cinoptions={0,1s,t0,n,p2s,(03s,=.5s,>1s,=1s,:1s     "设置C/C++语言的具体缩进方式
set backspace=2    " 设置退格键可用
set showmatch        " 设置匹配模式，显示匹配的括号
set linebreak        " 整词换行
set whichwrap=b,s,<,>,[,] " 光标从行首和行末时可以跳到另一行去
"set hidden " Hide buffers when they are abandoned
set mouse=a            " Enable mouse usage (all modes)    "使用鼠标
"set mouse=v
set number            " Enable line number    "显示行号
"set previewwindow    " 标识预览窗口
set history=50        " set command history to 50    "历史记录50条
set nowrap

if &term =~ '^screen'
    " tmux knows the extended mouse mode
    set ttymouse=xterm2
endif

"--状态行设置--
set laststatus=2 " 总显示最后一个窗口的状态行；设为1则窗口数多于一个的时候显示最后一个窗口的状态行；0不显示最后一个窗口的状态行
set ruler            " 标尺，用于显示光标位置的行号和列号，逗号分隔。每个窗口都有自己的标尺。如果窗口有状态行，标尺在那里显示。否则，它显示在屏幕的最后一行上。

"--命令行设置--
set showcmd            " 命令行显示输入的命令
set showmode        " 命令行显示vim当前模式

"--find setting--
set incsearch        " 输入字符串就显示匹配点
set hlsearch

" 设置空白字符的视觉提示
"set list listchars=extends:>,precedes:<,tab:➛\ ,trail:˽
"set list listchars=extends:>,precedes:<,tab:➤\ ,trail:˽
set list listchars=extends:>,precedes:<,tab:→\ ,trail:˽
"set list listchars=extends:>,precedes:<,tab:»\ ,trail:˽
"set list listchars=tab:»\ ,trail:˽
"set list listchars=tab:»\
highlight WhitespaceEOL ctermbg=red guibg=red
match WhitespaceEOL /\s\+$/

" 高亮当前行
set cursorline
"set cursorcolumn
"highlight CursorLine cterm=NONE ctermbg=black ctermfg=green guibg=NONE guifg=NONE
"highlight CursorColumn cterm=NONE ctermbg=black ctermfg=green guibg=NONE guifg=NONE
highlight CursorLine   cterm=NONE ctermbg=black ctermfg=NONE guibg=NONE guifg=NONE
highlight CursorColumn cterm=NONE ctermbg=black ctermfg=green guibg=NONE guifg=NONE


"autocmd FileType python set tabstop=4 | set expandtab | set autoindent
"autocmd FileType c set tabstop=4 | set expandtab | set autoindent
set ts=8
"set expandtab

set nowrap


"--ctags setting--
" 按下F5重新生成tag文件，并更新taglist
map <F5> :!ctags -R --c++-kinds=+p --fields=+iaS --extra=+q .<CR><CR> :TlistUpdate<CR>
imap <F5> <ESC>:!ctags -R --c++-kinds=+p --fields=+iaS --extra=+q .<CR><CR> :TlistUpdate<CR>
set tags=tags
set tags+=./tags "add current directory's generated tags file
"set tags+=~/arm/linux-2.6.24.7/tags "add new tags file(刚刚生成tags的路径，在ctags -R 生成tags文件后，不要将tags移动到别的目录，否则ctrl+］时，会提示找不到源码文件)

"set tags+=/usr/include/tags
set tags+=~/.vim/systags

"ctags -I __THROW --file-scope=yes --let list listcharsngmap=c:+.h --languages=c,c++ --links=yes --c-kinds=+p --fields=+S -R -f ~/.vim/systags /usr/include /usr/local/include


""-- omnicppcomplete setting --
" 按下F3自动补全代码，注意该映射语句后不能有其他字符，包括tab；否则按下F3会自动补全一些乱码
imap <F3> <C-X><C-O>
" 按下F2根据头文件内关键字补全
imap <F2> <C-X><C-I>
set completeopt=menu,menuone " 关掉智能补全时的预览窗口
let OmniCpp_MayCompleteDot = 1 " autocomplete with .
let OmniCpp_MayCompleteArrow = 1 " autocomplete with ->
let OmniCpp_MayCompleteScope = 1 " autocomplete with ::
let OmniCpp_SelectFirstItem = 2 " select first item (but don't insert)
let OmniCpp_NamespaceSearch = 2 " search namespaces in this and included files
let OmniCpp_ShowPrototypeInAbbr = 1 " show function prototype in popup window
let OmniCpp_GlobalScopeSearch=1 " enable the global scope search
let OmniCpp_DisplayMode=1 " Class scope completion mode: always show all members
"let OmniCpp_DefaultNamespaces=["std"]
let OmniCpp_ShowScopeInAbbr=1 " show scope in abbreviation and remove the last column
let OmniCpp_ShowAccess=1



"-- Taglist setting --
let Tlist_Ctags_Cmd='ctags' "因为我们放在环境变量里，所以可以直接执行
let Tlist_Use_Right_Window=0 "让窗口显示在右边，0的话就是显示在左边
let Tlist_Show_One_File=0 "让taglist可以同时展示多个文件的函数列表
let Tlist_File_Fold_Auto_Close=1 "非当前文件，函数列表折叠隐藏
let Tlist_Exit_OnlyWindow=1 "当taglist是最后一个分割窗口时，自动推出vim
"是否一直处理tags.1:处理;0:不处理
let Tlist_Process_File_Always=1 "实时更新tags
let Tlist_Inc_Winwidth=0
let Tlist_WinWidth=40

nmap wt :TlistToggle<cr>


"-- NERD Tree --
let g:NERDTree_title='NERD_Tree'
function! NERDTree_Start()
    "exec 'NERDTree'
    let curBufNum=bufnr()
    exe 'NERDTree | bd ' . curBufNum
endfunction

function! NERDTree_IsValid()
    return 1
endfunction

" 关闭NERDTree快捷键
"map <leader>t :NERDTreeToggle<CR>
" 显示行号
"let NERDTreeShowLineNumbers=1
let NERDTreeAutoCenter=1
" 是否显示隐藏文件
let NERDTreeShowHidden=1
" 设置宽度
"let NERDTreeWinSize=31
" 在终端启动vim时，共享NERDTree
"let g:nerdtree_tabs_open_on_console_startup=1
" 忽略一下文件的显示
let NERDTreeIgnore=['\.pyc','\~$','\.swp']
" 显示书签列表
let NERDTreeShowBookmarks=1
let g:NERDTreeIndicatorMapCustom = {
    \ "Modified"  : "✹",
    \ "Staged"    : "✚",
    \ "Untracked" : "✭",
    \ "Renamed"   : "➜",
    \ "Unmerged"  : "═",
    \ "Deleted"   : "✖",
    \ "Dirty"     : "✗",
    \ "Clean"     : "✔︎",
    \ "Unknown"   : "?"
    \ }
let NERDTreeDirArrowExpandable="+"
let NERDTreeDirArrowCollapsible="-"
nmap wn :NERDTreeToggle<cr>

"-- WinManager setting --
let g:winManagerWindowLayout='NERDTree|TagList,BufExplorer' " 设置我们要管理的插件
"let g:winManagerWindowLayout='FileExplorer|TagList' " 设置我们要管理的插件
"let g:winManagerWindowLayout='TagList' " 设置我们要管理的插件
"let g:winManagerWindowLayout='TagList|BufExplorer' " 设置我们要管理的插件
let g:persistentBehaviour=0 " 如果所有编辑文件都关闭了，退出vim

nmap wm :WMToggle<cr> 

"let g:AutoOpenWinManager = 1
"au VimEnter * :WMToggle


"--fold setting--
set foldmethod=syntax " 用语法高亮来定义折叠
set foldlevel=100 " 启动vim时不要自动折叠代码
set foldcolumn=3 " 设置折叠栏宽度



"-- QuickFix setting --
" 按下F6，执行make clean
map <F6> :make clean<CR><CR><CR>
" 按下F7，执行make编译程序，并打开quickfix窗口，显示编译信息
"map <F7> :make<CR><CR><CR> :copen<CR><CR>
"map <F7> :make ARCH=arm64 -j$(nproc --all) O=build/ CROSS_COMPILE=aarch64-none-linux-gnu- Image<CR><CR><CR> :copen<CR><CR>
map <F7> :make -f main.mk<CR><CR><CR> :copen<CR><CR>
" 按下F8，光标移到上一个错误所在的行
map <F8> :cp<CR>
" 按下F9，光标移到下一个错误所在的行
map <F9> :cn<CR>
" 以上的映射是使上面的快捷键在插入模式下也能用
imap <F6> <ESC>:make clean<CR><CR><CR>
"imap <F7> <ESC>:make<CR><CR><CR> :copen<CR><CR>
"imap <F7> <ESC>:make ARCH=arm64 -j$(nproc --all) O=build/ CROSS_COMPILE=aarch64-none-linux-gnu- Image<CR><CR><CR> :copen<CR><CR>
imap <F7> <ESC>:make -f main.mk<CR><CR><CR> :copen<CR><CR>
imap <F8> <ESC>:cp<CR>
imap <F9> <ESC>:cn<CR>



" -- MiniBufferExplorer --
let g:miniBufExplMapWindowNavVim = 1 " 按下Ctrl+h/j/k/l，可以切换到当前窗口的上下左右窗口
let g:miniBufExplMapWindowNavArrows= 1 " 按下Ctrl+箭头，可以切换到当前窗口的上下左右窗口
let g:miniBufExplMapCTabSwitchBufs = 1 " 启用以下两个功能：Ctrl+tab移到下一个buffer并在当前窗口打开；Ctrl+Shift+tab移到上一个buffer并在当前窗口打开；ubuntu好像不支持
"let g:miniBufExplMapCTabSwitchWindows = 1 " 启用以下两个功能：Ctrl+tab移到下一个窗口；Ctrl+Shift+tab移到上一个窗口；ubuntu好像不支持
let g:miniBufExplModSelTarget= 1    " 不要在不可编辑内容的窗口（如TagList窗口）中打开选中的buffer



"-- Cscope setting --
if has("cscope")
	set csprg=/usr/bin/cscope        " 指定用来执行cscope的命令
	set csto=0                        " 设置cstag命令查找次序：0先找cscope数据库再找标签文件；1先找标签文件再找cscope数据库
	set cst                            " 同时搜索cscope数据库和标签文件
	set cscopequickfix=s-,g-,f-,c-,d-,i-,t-,e-    " 使用QuickFix窗口来显示cscope查找结果
	set nocsverb
	if filereadable("cscope.out")    " 若当前目录下存在cscope数据库，添加该数据库到vim
		cs add cscope.out
	elseif $CSCOPE_DB != ""            " 否则只要环境变量CSCOPE_DB不为空，则添加其指定的数据库到vim
		cs add $CSCOPE_DB
	endif
	set csverb

	map <F4> :cs add ./cscope.out .<CR><CR><CR> :cs reset<CR>
	imap <F4> <ESC>:cs add ./cscope.out .<CR><CR><CR> :cs reset<CR>
	nmap <C-\>s :cs find s <C-R>=expand("<cword>")<CR><CR>:copen<CR><CR>
	nmap <C-\>g :cs find g <C-R>=expand("<cword>")<CR><CR>
	nmap <C-\>d :cs find d <C-R>=expand("<cword>")<CR><CR>:copen<CR><CR>
	nmap <C-\>c :cs find c <C-R>=expand("<cword>")<CR><CR>:copen<CR><CR>
	nmap <C-\>t :cs find t <C-R>=expand("<cword>")<CR><CR>:copen<CR><CR>
	nmap <C-\>e :cs find e <C-R>=expand("<cword>")<CR><CR>:copen<CR><CR>
	nmap <C-\>f :cs find f <C-R>=expand("<cword>")<CR><CR>
	nmap <C-\>i :cs find i <C-R>=expand("<cword>")<CR><CR>:copen<CR><CR>
endif

"cs add /home/zhangao/work/yocto-3.10.53-dev/sources/cscope.out

"au VimEnter *:cs add /home/zhangao/work/linux-source-3.13.0/cscope.out

"-- DoxygenToolkit --
let g:DoxygenToolkit_briefTag_funcName = "yes"
let g:DoxygenToolkit_detailsTag_funcName = "yes"
" for C++ style, change the '@' to '\'
"let g:DoxygenToolkit_commentType = "C++"
"let g:DoxygenToolkit_briefTag_pre = "\\brief "
"let g:DoxygenToolkit_templateParamTag_pre = "\\tparam "
"let g:DoxygenToolkit_paramTag_pre = "\\param "
"let g:DoxygenToolkit_returnTag = "\\return "
"let g:DoxygenToolkit_throwTag_pre = "\\throw " " @exception is also valid
"let g:DoxygenToolkit_fileTag = "\\file "
"let g:DoxygenToolkit_dateTag = "\\date "
"let g:DoxygenToolkit_authorTag = "\\author "
"let g:DoxygenToolkit_versionTag = "\\version "
"let g:DoxygenToolkit_blockTag = "\\name "
"let g:DoxygenToolkit_classTag = "\\class "
"let g:DoxygenToolkit_authorName = "Qian Gu, guqian110@gmail.com"
"let g:doxygen_enhanced_color = 1
"let g:load_doxygen_syntax = 1
"let g:DoxygenToolKit_startCommentBlock = "/// "
"let g:DoxygenToolKit_interCommentBlock = "/// "

"nn <M-1> 1gt
"nn <M-2> 2gt
"nn <M-3> 3gt
"nn <M-4> 4gt
"nn <M-5> 5gt
"nn <M-6> 6gt
"nn <M-7> 7gt
"nn <M-8> 8gt
"nn <M-9> 9gt
"nn <M-0> :tablast<CR>


set fileencodings=utf-8,ucs-bom,gb18030,gbk,gb2312,cp936
set termencoding=utf-8
set encoding=utf-8



"" ##### neocomplete
""Note: This option must be set in .vimrc(_vimrc).  NOT IN .gvimrc(_gvimrc)!
"" Disable AutoComplPop.
"let g:acp_enableAtStartup = 0
"" Use neocomplete.
"let g:neocomplete#enable_at_startup = 1
"" Use smartcase.
"let g:neocomplete#enable_smart_case = 1
"" Set minimum syntax keyword length.
"let g:neocomplete#sources#syntax#min_keyword_length = 3
"
"" Define dictionary.
"let g:neocomplete#sources#dictionary#dictionaries = {
"            \ 'default' : '',
"            \ 'vimshell' : $HOME.'/.vimshell_hist',
"            \ 'scheme' : $HOME.'/.gosh_completions'
"            \ }
"
"" Define keyword.
"if !exists('g:neocomplete#keyword_patterns')
"    let g:neocomplete#keyword_patterns = {}
"endif
"let g:neocomplete#keyword_patterns['default'] = '\h\w*'
"
"" Plugin key-mappings.
"inoremap <expr><C-g> neocomplete#undo_completion()
"inoremap <expr><C-l> neocomplete#complete_common_string()
"
"" Recommended key-mappings.
"" <CR>: close popup and save indent.
"inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
"function! s:my_cr_function()
"    return (pumvisible() ? "\<C-y>" : "" ) . "\<CR>"
"    For no inserting <CR> key.
"    "return pumvisible() ? "\<C-y>" : "\<CR>"
"endfunction
"" <TAB>: completion.
"inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
"" <C-h>, <BS>: close popup and delete backword char.
"inoremap <expr><C-h> neocomplete#smart_close_popup()."\<C-h>"
"inoremap <expr><BS> neocomplete#smart_close_popup()."\<C-h>"
"" Close popup by <Space>.
""inoremap <expr><Space> pumvisible() ? "\<C-y>" : "\<Space>"
"
"" AutoComplPop like behavior.
""let g:neocomplete#enable_auto_select = 1
"
"" Shell like behavior(not recommended).
""set completeopt+=longest
""let g:neocomplete#enable_auto_select = 1
""let g:neocomplete#disable_auto_complete = 1
""inoremap <expr><TAB>  pumvisible() ? "\<Down>" : "\<C-x>\<C-u>"
"
"" Enable omni completion.
"autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
"autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
"autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
"autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
"autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags
"
"" Enable heavy omni completion.
"if !exists('g:neocomplete#sources#omni#input_patterns')
"    let g:neocomplete#sources#omni#input_patterns = {}
"endif
""let g:neocomplete#sources#omni#input_patterns.php = '[^.  \t]->\h\w*\|\h\w*::'
""let g:neocomplete#sources#omni#input_patterns.c = '[^.[:digit:] *\t]\%(\.\|->\)'
""let g:neocomplete#sources#omni#input_patterns.cpp = '[^.[:digit:] *\t]\%(\.\|->\)\|\h\w*::'
"
"" For perlomni.vim setting.
"" https://github.com/c9s/perlomni.vim
"let g:neocomplete#sources#omni#input_patterns.perl = '\h\w*->\h\w*\|\h\w*::'


" ##### supertab
let g:SuperTabRetainCompletionType=2


" ##### smooth_scroll
noremap <silent> <c-u> :call smooth_scroll#up(&scroll, 5, 1)<CR>
noremap <silent> <c-d> :call smooth_scroll#down(&scroll, 5, 1)<CR>
noremap <silent> <c-b> :call smooth_scroll#up(&scroll*2, 0, 4)<CR>
noremap <silent> <c-f> :call smooth_scroll#down(&scroll*2, 0, 4)<CR>


" 可视化缩进
let g:indent_guides_enable_on_vim_startup = 0  " 默认关闭
let g:indent_guides_guide_size            = 1  " 指定对齐线的尺寸
let g:indent_guides_start_level           = 2  " 从第二层开始可视化显示缩进


" ### conqueTerm
"let g:ConqueTerm_TERM ='xterm'
let g:ConqueTerm_TERM ='linux'
nmap <Leader>sh :ConqueTerm bash<CR>
nmap <Leader>shs :ConqueTermSplit bash<CR>
nmap <Leader>shv :ConqueTermVSplit bash<CR>
nmap <Leader>sht :ConqueTermTab bash<CR>
" 水平分割出一个bash
nnoremap    <C-\>b              :ConqueTermSplit bash<CR>
" " 垂直分割出一个bash
nnoremap    <C-\>vb             :ConqueTermVSplit bash<CR>

" #### airline themes
let g:airline_theme='angr'
"let g:airline_solarized_bg='dark'

" #### Pydiction
let g:pydiction_location = '~/.vim/plugged/Pydiction/complete-dict'

" #### ale
" 显示状态栏+不需要高亮行
let g:ale_sign_column_always = 1
let g:ale_set_highlights = 0
" 错误和警告标志
let g:ale_sign_error = 'x'
let g:ale_sign_warning = '!'
" 文件保存时，显示警告
let g:ale_lint_on_text_changed = 'never'
let g:ale_lint_on_enter = 0
" 使用clang对c和c++进行语法检查，对python使用pylint进行语法检查
let g:ale_linters = {
\   'c++': ['clang'],
\   'c': ['clang'],
\   'python': ['pylint'],
\}

" #### autocomplete dropdown list colorscheme
hi Pmenu ctermfg=0 ctermbg=7 
hi PmenuSel ctermfg=7 ctermbg=4

" #### neocomplte
let g:neocomplcache_enable_at_startup = 1 
let g:neocomplcache_enable_smart_case = 1 
inoremap <expr><TAB> pumvisible()?"\<C-n>" : "\<TAB>"

" #### FZF
" This is the default option:
"   - Preview window on the right with 50% width
"   - CTRL-/ will toggle preview window.
" - Note that this array is passed as arguments to fzf#vim#with_preview function.
" - To learn more about preview window options, see `--preview-window` section of `man fzf`.
let g:fzf_preview_window = ['right:50%', 'ctrl-/']

" Preview window on the upper side of the window with 40% height,
" hidden by default, ctrl-/ to toggle
let g:fzf_preview_window = ['up:40%:hidden', 'ctrl-/']

" Empty value to disable preview window altogether
let g:fzf_preview_window = []

" [Buffers] Jump to the existing window if possible
let g:fzf_buffers_jump = 1

" [[B]Commits] Customize the options used by 'git log':
let g:fzf_commits_log_options = '--graph --color=always --format="%C(auto)%h%d %s %C(black)%C(bold)%cr"'

" [Tags] Command to generate tags file
let g:fzf_tags_command = 'ctags -R'

" [Commands] --expect expression for directly executing the command
let g:fzf_commands_expect = 'alt-enter,ctrl-x'

nnoremap <C-T> :FZF<CR>


" #### ACK
cnoreabbrev Ack Ack!
nnoremap <Leader>a :Ack!<Space>
nmap <C-\>a :Ack <C-R>=expand("<cword>")<CR><CR>:copen<CR><CR>
"nmap <C-\>A :Ack <C-R>=expand("<cword>")<CR>
if executable('ag')
      let g:ackprg = 'ag --vimgrep'
endif
" 高亮搜索关键词
let g:ackhighlight = 1


" #### ripgrep
"nnoremap <Leader>r :Rg<Space>
nmap <C-\>r :Rg <C-R>=expand("<cword>")<CR><CR>


" #####plug Configure 
call plug#begin('~/.vim/plugged')
Plug 'scrooloose/nerdtree'
Plug 'vim-scripts/taglist.vim'
Plug 'vim-scripts/a.vim'
Plug 'vim-scripts/winmanager'
"Plug 'vim-scripts/vim-airline'
Plug 'vim-scripts/minibufexplorerpp'
Plug 'vim-scripts/bufexplorer.zip'
"Plug 'Shougo/neocomplete.vim'
"Plug 'Shougo/neosnippet'
"Plug 'Shougo/neosnippet-snippets'
Plug 'terryma/vim-smooth-scroll'
Plug 'ervandew/supertab'
Plug 'vim-scripts/indentpython.vim'
Plug 'nathanaelkane/vim-indent-guides'
Plug 'junegunn/vim-easy-align'
"Plug 'vim-scripts/vim-airline'
"Plug 'vim-airline/vim-airline-themes'
Plug 'vim-scripts/Conque-Shell'
Plug 'vim-scripts/LargeFile'
Plug 'lrvick/Conque-Shell'
"Plug 'vim-scripts/Pydiction'
"Plug 'w0rp/ale'
Plug 'dense-analysis/ale'
"Plug 'previm/previm'
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'
Plug 'mileszs/ack.vim'
"Plug 'jiangmiao/auto-pairs'
Plug 'vim-scripts/ingo-library'
Plug 'vim-scripts/mark'
call plug#end()

